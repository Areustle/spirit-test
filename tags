!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.8	//
DEC	timeline.cpp	/^		double DEC;$/;"	m	struct:client::opt_evt_fields	file:
DEC	timeline.cpp	/^		double_rule DEC;$/;"	m	struct:client::timeline_grammar	file:
PI	timeline.cpp	/^		std::string PI;$/;"	m	struct:client::opt_evt_fields	file:
PI	timeline.cpp	/^		string_rule PI;$/;"	m	struct:client::timeline_grammar	file:
RA	timeline.cpp	/^		double RA;$/;"	m	struct:client::opt_evt_fields	file:
RA	timeline.cpp	/^		double_rule RA;$/;"	m	struct:client::timeline_grammar	file:
SSN	timeline.cpp	/^		int SSN;$/;"	m	struct:client::opt_evt_fields	file:
SSN	timeline.cpp	/^		int_rule SSN;$/;"	m	struct:client::timeline_grammar	file:
additional	timeline.cpp	/^		opt_evt_fields additional;$/;"	m	struct:client::timeline_event	file:
age	examples/employee.cpp	/^        int age;$/;"	m	struct:client::employee	file:
children	examples/minixml.cpp	/^        std::vector<mini_xml_node> children;        \/\/ children$/;"	m	struct:client::mini_xml	file:
client	examples/actions.cpp	/^namespace client$/;"	n	file:
client	examples/employee.cpp	/^namespace client$/;"	n	file:
client	examples/minixml.cpp	/^namespace client$/;"	n	file:
client	examples/num_list1.cpp	/^namespace client$/;"	n	file:
client	examples/roman.cpp	/^namespace client$/;"	n	file:
client	spirit-test.cpp	/^namespace client$/;"	n	file:
client	timeline.cpp	/^namespace client$/;"	n	file:
comment	timeline.cpp	/^		std::string comment;$/;"	m	struct:client::opt_evt_fields	file:
comment	timeline.cpp	/^		string_rule comment;$/;"	m	struct:client::timeline_grammar	file:
double_rule	timeline.cpp	/^		typedef qi::rule<Iterator, double, ascii::space_type> double_rule;$/;"	t	struct:client::timeline_grammar	file:
duration	timeline.cpp	/^		double duration;$/;"	m	struct:client::opt_evt_fields	file:
duration	timeline.cpp	/^		double_rule duration;$/;"	m	struct:client::timeline_grammar	file:
employee	examples/employee.cpp	/^    struct employee$/;"	s	namespace:client	file:
employee_parser	examples/employee.cpp	/^        employee_parser() : employee_parser::base_type(start)$/;"	f	struct:client::employee_parser
employee_parser	examples/employee.cpp	/^    struct employee_parser : qi::grammar<Iterator, employee(), ascii::space_type>$/;"	s	namespace:client	file:
end_tag	examples/minixml.cpp	/^        qi::rule<Iterator, void(std::string), ascii::space_type> end_tag;$/;"	m	struct:client::mini_xml_grammar	file:
event	spirit-test.cpp	/^      qi::rule<Iterator, timeline_event(),  ascii::space_type> event;$/;"	m	struct:client::timeline_grammar	file:
event	timeline.cpp	/^		qi::rule<Iterator, timeline_event(), ascii::space_type> event;$/;"	m	struct:client::timeline_grammar	file:
event_name	spirit-test.cpp	/^			std::string event_name;$/;"	m	struct:client::timeline_event	file:
event_name	spirit-test.cpp	/^      qi::rule<Iterator, std::string(), ascii::space_type> event_name;$/;"	m	struct:client::timeline_grammar	file:
event_name	timeline.cpp	/^		std::string event_name;$/;"	m	struct:client::timeline_event	file:
event_name	timeline.cpp	/^		string_rule event_name;$/;"	m	struct:client::timeline_grammar	file:
event_type	spirit-test.cpp	/^			std::string event_type;$/;"	m	struct:client::timeline_event	file:
event_type	spirit-test.cpp	/^      qi::rule<Iterator, std::string(), ascii::space_type> event_type;$/;"	m	struct:client::timeline_grammar	file:
event_type	timeline.cpp	/^		std::string event_type;$/;"	m	struct:client::timeline_event	file:
event_type	timeline.cpp	/^		string_rule event_type;$/;"	m	struct:client::timeline_grammar	file:
events	timeline.cpp	/^		std::vector<timeline_event> events;$/;"	m	struct:client::timeline	file:
forename	examples/employee.cpp	/^        std::string forename;$/;"	m	struct:client::employee	file:
hundreds	examples/roman.cpp	/^    } hundreds;$/;"	m	namespace:client	typeref:struct:client::hundreds_	file:
hundreds_	examples/roman.cpp	/^        hundreds_()$/;"	f	struct:client::hundreds_
hundreds_	examples/roman.cpp	/^    struct hundreds_ : qi::symbols<char, unsigned>$/;"	s	namespace:client	file:
indent	examples/minixml.cpp	/^        int indent;$/;"	m	struct:client::mini_xml_node_printer	file:
indent	examples/minixml.cpp	/^        int indent;$/;"	m	struct:client::mini_xml_printer	file:
int_rule	timeline.cpp	/^		typedef qi::rule<Iterator, int, ascii::space_type> int_rule;$/;"	t	struct:client::timeline_grammar	file:
main	examples/actions.cpp	/^int main()$/;"	f
main	examples/employee.cpp	/^main()$/;"	f
main	examples/minixml.cpp	/^int main(int argc, char **argv)$/;"	f
main	examples/num_list1.cpp	/^main()$/;"	f
main	examples/roman.cpp	/^main()$/;"	f
main	spirit-test.cpp	/^main()$/;"	f
main	timeline.cpp	/^int main(int argc, char **argv)$/;"	f
mini_xml	examples/minixml.cpp	/^    struct mini_xml$/;"	s	namespace:client	file:
mini_xml_grammar	examples/minixml.cpp	/^        mini_xml_grammar()$/;"	f	struct:client::mini_xml_grammar
mini_xml_grammar	examples/minixml.cpp	/^    struct mini_xml_grammar$/;"	s	namespace:client	file:
mini_xml_node	examples/minixml.cpp	/^    mini_xml_node;$/;"	t	namespace:client	file:
mini_xml_node_printer	examples/minixml.cpp	/^        mini_xml_node_printer(int indent = 0)$/;"	f	struct:client::mini_xml_node_printer
mini_xml_node_printer	examples/minixml.cpp	/^    struct mini_xml_node_printer : boost::static_visitor<>$/;"	s	namespace:client	file:
mini_xml_printer	examples/minixml.cpp	/^        mini_xml_printer(int indent = 0)$/;"	f	struct:client::mini_xml_printer
mini_xml_printer	examples/minixml.cpp	/^    struct mini_xml_printer$/;"	s	namespace:client	file:
name	examples/minixml.cpp	/^        std::string name;                           \/\/ tag name$/;"	m	struct:client::mini_xml	file:
node	examples/minixml.cpp	/^        qi::rule<Iterator, mini_xml_node(), ascii::space_type> node;$/;"	m	struct:client::mini_xml_grammar	file:
obs_number	spirit-test.cpp	/^			std::string obs_number;$/;"	m	struct:client::timeline_event	file:
obs_number	timeline.cpp	/^		std::string obs_number;$/;"	m	struct:client::timeline_event	file:
obsid	timeline.cpp	/^		string_rule obsid;$/;"	m	struct:client::timeline_grammar	file:
obsnum	timeline.cpp	/^		string_rule obsnum;$/;"	m	struct:client::timeline_grammar	file:
offset	timeline.cpp	/^		double offset;$/;"	m	struct:client::opt_evt_fields	file:
offset	timeline.cpp	/^		double_rule offset;$/;"	m	struct:client::timeline_grammar	file:
ones	examples/roman.cpp	/^    } ones;$/;"	m	namespace:client	typeref:struct:client::ones_	file:
ones_	examples/roman.cpp	/^        ones_()$/;"	f	struct:client::ones_
ones_	examples/roman.cpp	/^    struct ones_ : qi::symbols<char, unsigned>$/;"	s	namespace:client	file:
operator ()	examples/actions.cpp	/^        void operator()(int const& i, qi::unused_type, qi::unused_type) const$/;"	f	struct:client::print_action
operator ()	examples/minixml.cpp	/^        void operator()(mini_xml const& xml) const$/;"	f	struct:client::mini_xml_node_printer
operator ()	examples/minixml.cpp	/^        void operator()(std::string const& text) const$/;"	f	struct:client::mini_xml_node_printer
operator ()	examples/minixml.cpp	/^    void mini_xml_printer::operator()(mini_xml const& xml) const$/;"	f	class:client::mini_xml_printer
opt_evt_fields	timeline.cpp	/^		qi::rule<Iterator, opt_evt_fields(), ascii::space_type> opt_evt_fields;$/;"	m	struct:client::timeline_grammar	file:
opt_evt_fields	timeline.cpp	/^	struct opt_evt_fields$/;"	s	namespace:client	file:
pairs	timeline.cpp	/^		std::vector<rockprofile_pair> pairs;$/;"	m	struct:client::rocking_profile	file:
parse_numbers	examples/num_list1.cpp	/^    bool parse_numbers(Iterator first, Iterator last)$/;"	f	namespace:client
print	examples/actions.cpp	/^        void print(int const& i) const$/;"	f	struct:client::writer
print	examples/actions.cpp	/^    void print(int const& i)$/;"	f	namespace:client
print_action	examples/actions.cpp	/^    struct print_action$/;"	s	namespace:client	file:
profile	timeline.cpp	/^		rocking_profile profile;$/;"	m	struct:client::opt_evt_fields	file:
prop_ID	timeline.cpp	/^		std::string prop_ID;$/;"	m	struct:client::opt_evt_fields	file:
prop_ID	timeline.cpp	/^		string_rule prop_ID;$/;"	m	struct:client::timeline_grammar	file:
quoted_string	examples/employee.cpp	/^        qi::rule<Iterator, std::string(), ascii::space_type> quoted_string;$/;"	m	struct:client::employee_parser	file:
rockangle	timeline.cpp	/^		double rockangle;$/;"	m	struct:client::rockprofile_pair	file:
rockdefault	timeline.cpp	/^		double rockdefault;$/;"	m	struct:client::rocking_profile	file:
rocking_profile	timeline.cpp	/^		qi::rule<Iterator, rocking_profile(), ascii::space_type> rocking_profile;$/;"	m	struct:client::timeline_grammar	file:
rocking_profile	timeline.cpp	/^	struct rocking_profile$/;"	s	namespace:client	file:
rockprofile_pair	timeline.cpp	/^	struct rockprofile_pair$/;"	s	namespace:client	file:
rockstart	timeline.cpp	/^		std::string rockstart;$/;"	m	struct:client::rocking_profile	file:
rockstart_met	timeline.cpp	/^		int rockstart_met;$/;"	m	struct:client::rocking_profile	file:
rocktime	timeline.cpp	/^		int rocktime;$/;"	m	struct:client::rockprofile_pair	file:
rocktime_angle	timeline.cpp	/^		qi::rule<Iterator, rockprofile_pair(), ascii::space_type> rocktime_angle;$/;"	m	struct:client::timeline_grammar	file:
roman	examples/roman.cpp	/^        roman() : roman::base_type(start)$/;"	f	struct:client::roman
roman	examples/roman.cpp	/^    struct roman : qi::grammar<Iterator, unsigned()>$/;"	s	namespace:client	file:
saa	timeline.cpp	/^		int saa;$/;"	m	struct:client::opt_evt_fields	file:
saa	timeline.cpp	/^		int_rule saa;$/;"	m	struct:client::timeline_grammar	file:
salary	examples/employee.cpp	/^        double salary;$/;"	m	struct:client::employee	file:
slew	timeline.cpp	/^		int slew;$/;"	m	struct:client::opt_evt_fields	file:
slew	timeline.cpp	/^		int_rule slew;$/;"	m	struct:client::timeline_grammar	file:
start	examples/employee.cpp	/^        qi::rule<Iterator, employee(), ascii::space_type> start;$/;"	m	struct:client::employee_parser	file:
start	examples/roman.cpp	/^        qi::rule<Iterator, unsigned()> start;$/;"	m	struct:client::roman	file:
start_tag	examples/minixml.cpp	/^        qi::rule<Iterator, std::string(), ascii::space_type> start_tag;$/;"	m	struct:client::mini_xml_grammar	file:
string_rule	timeline.cpp	/^		typedef qi::rule<Iterator, std::string(), ascii::space_type> string_rule;$/;"	t	struct:client::timeline_grammar	file:
surname	examples/employee.cpp	/^        std::string surname;$/;"	m	struct:client::employee	file:
tab	examples/minixml.cpp	/^    void tab(int indent)$/;"	f	namespace:client
tabsize	examples/minixml.cpp	/^    int const tabsize = 4;$/;"	m	namespace:client	file:
target_name	timeline.cpp	/^		std::string target_name;$/;"	m	struct:client::opt_evt_fields	file:
target_name	timeline.cpp	/^		string_rule target_name;$/;"	m	struct:client::timeline_grammar	file:
tens	examples/roman.cpp	/^    } tens;$/;"	m	namespace:client	typeref:struct:client::tens_	file:
tens_	examples/roman.cpp	/^        tens_()$/;"	f	struct:client::tens_
tens_	examples/roman.cpp	/^    struct tens_ : qi::symbols<char, unsigned>$/;"	s	namespace:client	file:
text	examples/minixml.cpp	/^        qi::rule<Iterator, std::string(), ascii::space_type> text;$/;"	m	struct:client::mini_xml_grammar	file:
timeline	timeline.cpp	/^		qi::rule<Iterator, timeline(), ascii::space_type> timeline;$/;"	m	struct:client::timeline_grammar	file:
timeline	timeline.cpp	/^	struct timeline$/;"	s	namespace:client	file:
timeline_event	spirit-test.cpp	/^		struct timeline_event$/;"	s	namespace:client	file:
timeline_event	timeline.cpp	/^	struct timeline_event$/;"	s	namespace:client	file:
timeline_grammar	spirit-test.cpp	/^			timeline_grammar() : timeline_grammar::base_type(event)$/;"	f	struct:client::timeline_grammar
timeline_grammar	spirit-test.cpp	/^		struct timeline_grammar : qi::grammar<Iterator, timeline_event(), ascii::space_type>$/;"	s	namespace:client	file:
timeline_grammar	timeline.cpp	/^		timeline_grammar() : timeline_grammar::base_type(timeline)$/;"	f	struct:client::timeline_grammar
timeline_grammar	timeline.cpp	/^	struct timeline_grammar$/;"	s	namespace:client	file:
timestamp	spirit-test.cpp	/^			std::string timestamp;$/;"	m	struct:client::timeline_event	file:
timestamp	timeline.cpp	/^		std::string timestamp;$/;"	m	struct:client::timeline_event	file:
timestamp	timeline.cpp	/^		string_rule timestamp;$/;"	m	struct:client::timeline_grammar	file:
week	timeline.cpp	/^		int week;$/;"	m	struct:client::opt_evt_fields	file:
week	timeline.cpp	/^		int_rule week;$/;"	m	struct:client::timeline_grammar	file:
writer	examples/actions.cpp	/^    struct writer$/;"	s	namespace:client	file:
xml	examples/minixml.cpp	/^        qi::rule<Iterator, mini_xml(), qi::locals<std::string>, ascii::space_type> xml;$/;"	m	struct:client::mini_xml_grammar	file:
